# Generated by Django 3.0.5 on 2020-09-13 00:04

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Pokemon',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='id')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Nome')),
                ('height', models.CharField(max_length=255, verbose_name='Altura')),
                ('weight', models.CharField(max_length=255, verbose_name='Largura')),
                ('image', models.CharField(max_length=455, unique=True, verbose_name='Imagem')),
            ],
            options={
                'verbose_name': 'Pokémon',
                'verbose_name_plural': 'Pokémons',
                'db_table': 'pokemon',
            },
        ),
        migrations.CreateModel(
            name='PokemonType',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='cadastrado em')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='atualizado em')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='ativo')),
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='id')),
                ('name', models.CharField(choices=[(1, 'normal'), (2, 'fight'), (3, 'flying'), (4, 'poison'), (5, 'ground'), (6, 'rock'), (7, 'bug'), (8, 'ghost'), (9, 'steel'), (10, 'fire'), (11, 'water'), (12, 'grass'), (13, 'electric'), (14, 'psychic'), (15, 'ice'), (16, 'dragon'), (17, 'dark'), (19, 'fairy')], max_length=255, verbose_name='Nome')),
            ],
            options={
                'verbose_name': 'Tipo de pokémon',
                'verbose_name_plural': 'Tipos de pokémons',
                'db_table': 'pokemon_type',
            },
        ),
        migrations.CreateModel(
            name='PokemonTeam',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='id')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='cadastrado em')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='atualizado em')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='ativo')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Nome')),
                ('pokemon', models.ManyToManyField(related_name='pokemon_pokemon_team', to='core.Pokemon')),
            ],
            options={
                'verbose_name': 'Time de pokémon',
                'verbose_name_plural': 'Times de pokémons',
                'db_table': 'pokemon_team',
            },
        ),
        migrations.AddField(
            model_name='pokemon',
            name='types',
            field=models.ManyToManyField(related_name='type_pokemon', to='core.PokemonType'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
